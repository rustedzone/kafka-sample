// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package consumekafkaproduct

import (
	"sync"
)

var (
	lockUsecaseMockConsumeAndStoreToES sync.RWMutex
)

// Ensure, that UsecaseMock does implement Usecase.
// If this is not the case, regenerate this file with moq.
var _ Usecase = &UsecaseMock{}

// UsecaseMock is a mock implementation of Usecase.
//
//     func TestSomethingThatUsesUsecase(t *testing.T) {
//
//         // make and configure a mocked Usecase
//         mockedUsecase := &UsecaseMock{
//             ConsumeAndStoreToESFunc: func(topic string)  {
// 	               panic("mock out the ConsumeAndStoreToES method")
//             },
//         }
//
//         // use mockedUsecase in code that requires Usecase
//         // and then make assertions.
//
//     }

// ConsumeAndStoreToES calls ConsumeAndStoreToESFunc.
func (mock *UsecaseMock) ConsumeAndStoreToES(topic string) {
	if mock.ConsumeAndStoreToESFunc == nil {
		panic("UsecaseMock.ConsumeAndStoreToESFunc: method is nil but Usecase.ConsumeAndStoreToES was just called")
	}
	callInfo := struct {
		Topic string
	}{
		Topic: topic,
	}
	lockUsecaseMockConsumeAndStoreToES.Lock()
	mock.calls.ConsumeAndStoreToES = append(mock.calls.ConsumeAndStoreToES, callInfo)
	lockUsecaseMockConsumeAndStoreToES.Unlock()
	mock.ConsumeAndStoreToESFunc(topic)
}

// ConsumeAndStoreToESCalls gets all the calls that were made to ConsumeAndStoreToES.
// Check the length with:
//     len(mockedUsecase.ConsumeAndStoreToESCalls())
func (mock *UsecaseMock) ConsumeAndStoreToESCalls() []struct {
	Topic string
} {
	var calls []struct {
		Topic string
	}
	lockUsecaseMockConsumeAndStoreToES.RLock()
	calls = mock.calls.ConsumeAndStoreToES
	lockUsecaseMockConsumeAndStoreToES.RUnlock()
	return calls
}
