// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package consumer

import (
	"sync"
)

var (
	lockRepositoryMockConsume sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             ConsumeFunc: func(topic string)  {
// 	               panic("mock out the Consume method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// ConsumeFunc mocks the Consume method.
	ConsumeFunc func(topic string)

	// calls tracks calls to the methods.
	calls struct {
		// Consume holds details about calls to the Consume method.
		Consume []struct {
			// Topic is the topic argument value.
			Topic string
		}
	}
}

// Consume calls ConsumeFunc.
func (mock *RepositoryMock) Consume(topic string) {
	if mock.ConsumeFunc == nil {
		panic("RepositoryMock.ConsumeFunc: method is nil but Repository.Consume was just called")
	}
	callInfo := struct {
		Topic string
	}{
		Topic: topic,
	}
	lockRepositoryMockConsume.Lock()
	mock.calls.Consume = append(mock.calls.Consume, callInfo)
	lockRepositoryMockConsume.Unlock()
	mock.ConsumeFunc(topic)
}

// ConsumeCalls gets all the calls that were made to Consume.
// Check the length with:
//     len(mockedRepository.ConsumeCalls())
func (mock *RepositoryMock) ConsumeCalls() []struct {
	Topic string
} {
	var calls []struct {
		Topic string
	}
	lockRepositoryMockConsume.RLock()
	calls = mock.calls.Consume
	lockRepositoryMockConsume.RUnlock()
	return calls
}
